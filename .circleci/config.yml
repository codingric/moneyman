version: 2.1

parameters:
  mailparser:
    type: boolean
    default: false
  backend:
    type: boolean
    default: false
  bigbills:
    type: boolean
    default: false
  auditor:
    type: boolean
    default: false
  up-webhook:
    type: boolean
    default: false
  setup:
    type: boolean
    default: true

orbs:
  path-filtering: circleci/path-filtering@0.1.0

setup: << pipeline.parameters.setup >>

jobs:
  test:
    parameters:
      pipe_name:
        type: string
        default: ""
    docker:
      - image: ghcr.io/codingric/gotester
    resource_class: medium
    steps:
      - checkout
      - setup_remote_docker
      - restore_cache:
          keys:
            - << parameters.pipe_name >>-test-modules
          paths:
            - /go/src
      - run:
          name: "Run Tests"
          working_directory: << parameters.pipe_name >>
          no_output_timeout: 15m
          command: |
            go mod download -x
            go test ./... -gcflags=all=-l -v -coverprofile coverage.out
            go tool cover -html coverage.out -o /tmp/coverage.html
      - save_cache:
          key: << parameters.pipe_name >>-test-modules
          paths:
            - /go/src
      - store_artifacts:
          path: /tmp/coverage.html
          destination: coverage.html
  build:
    parameters:
      pipe_name:
        type: string
        default: ""
    docker:
      - image: cimg/base:stable
    resource_class: medium
    steps:
      - checkout
      - setup_remote_docker
      - run: mkdir /tmp/cache
      - restore_cache:
          keys:
            - << parameters.pipe_name >>-v1
          paths:
            - /tmp/cache
      - run:
          name: Login into ghcr.io
          command: |
            docker login -u $CI_REGISTRY_USER -p $CI_REGISTRY_PASSWORD $CI_REGISTRY
      - run:
          name: Build application Docker image
          working_directory: << parameters.pipe_name >>
          no_output_timeout: 15m
          command: |
            export DOCKER_CLI_EXPERIMENTAL=enabled
            make package
      - save_cache:
          key: << parameters.pipe_name >>-v1
          paths:
            - /tmp/cache
  deploy:
    parameters:
      pipe_name:
        type: string
        default: ""
    docker:
      - image: ghcr.io/codingric/kksops
        entrypoint: /entrypoint.sh
    resource_class: medium
    steps:
      - checkout
      - run:
          name: Load keys and kube config
          command: helper.sh
      - run:
          working_directory: << parameters.pipe_name >>
          name: Kustomize
          command: make kustomize

# Invoke jobs via workflows
# See: https://circleci.com/docs/2.0/configuration-reference/#workflows
workflows:
  circleci-build:
    when: << pipeline.parameters.setup >>
    jobs:
      - path-filtering/filter:
          name: check-updated-files
          # 3-column, whitespace-delimited mapping. One mapping per
          # line:
          # <regex path-to-test> <parameter-to-set> <value-of-pipeline-parameter>
          mapping: |
            \.circleci.* mailparser true
            \.circleci.* backend true
            \.circleci.* bigbills true
            \.circleci.* auditor true
            \.circleci.* up-webhook true
            mailparser/(.*go\.(sum|mod)|.*(?<!test)\.go|Dockerfile|kustomize/.*\.yaml) mailparser true
            backend/(.*go\.(sum|mod)|.*(?<!test)\.go|Dockerfile|kustomize/.*\.yaml) backend true
            bigbills/.*(go|test|Dockerfile|kustomize).* bigbills true
            auditor/(.*go\.(sum|mod)|.*(?<!test)\.go|Dockerfile|kustomize/.*\.yaml) auditor true
            up-webhook/(.*go\.(sum|mod)|.*(?<!test)\.go|Dockerfile|kustomize/.*\.yaml) up-webhook true
            .* setup false
          base-revision: << pipeline.git.branch >>
          # this is the path of the configuration we should trigger once
          # path filtering and pipeline parameter value updates are
          # complete. In this case, we are using the parent dynamic
          # configuration itself.
          config-path: .circleci/config.yml
  build-mailparser:
    when: "<< pipeline.parameters.mailparser >>"
    jobs:
      - test:
          pipe_name: mailparser
      - build:
          pipe_name: mailparser
          requires:
            - test
      - deploy:
          pipe_name: mailparser
          requires:
            - build
          context: k3s
  build-backend:
    when: "<< pipeline.parameters.backend >>"
    jobs:
      - test:
          pipe_name: backend
      - build:
          pipe_name: backend
          requires:
            - test
      - deploy:
          pipe_name: backend
          requires:
            - build
          context: k3s
  build-bigbills:
    when: "<< pipeline.parameters.bigbills >>"
    jobs:
      - test:
          pipe_name: bigbills
      - build:
          pipe_name: bigbills
          requires:
            - test
      - deploy:
          pipe_name: bigbills
          requires:
            - build
          context: k3s
  build-auditor:
    when: "<< pipeline.parameters.auditor >>"
    jobs:
      - test:
          pipe_name: auditor
      - build:
          pipe_name: auditor
          requires:
            - test
      - deploy:
          pipe_name: auditor
          requires:
            - build
          context: k3s
  build-up-webhook:
    when: "<< pipeline.parameters.up-webhook >>"
    jobs:
      - test:
          pipe_name: up-webhook
      - build:
          pipe_name: up-webhook
          requires:
            - test
      - deploy:
          pipe_name: up-webhook
          requires:
            - build
          context: k3s
